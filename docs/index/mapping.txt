Removal (deprecation)  of Mapping Types
-------------------------------------
Since the first release of Elasticsearch, each document has been stored in a single index and assigned a single
mapping type.
 A mapping type was used to represent the type of document or entity being indexed,
  for instance a twitter index might have a user type and a tweet type.

Each mapping type could have its own fields- so the user type might have a full_name field,
 a user_name field, and an email field, while the tweet type could have a content field,
  a tweeted_at field and, like the user type, a user_name field.

Each document had a _type metadata field containing the type name, and searches could be limited to one or more
types by specifying the type name(s) in the URL:

GET twitter/user,tweet/_search
{
  "query": {
    "match": {
      "user_name": "kimchy"
    }
  }
}
------------------------------------

Why are mapping types being removed
-------------------
Initially, we spoke about an “index” being similar to a “database” in an SQL database, and a “type” being
 equivalent to a “table”.

This was a bad analogy that led to incorrect assumptions.
In an SQL database, tables are independent of each other.
The columns in one table have no bearing on columns with the same name in another table.
This is not the case for fields in a mapping type.

In an Elasticsearch index, fields that have the same name in different mapping types are backed by the same Lucene
field internally.
In other words, using the example above, the user_name field in the user type is stored in exactly the same field as
the user_name field in the tweet type, and both user_name fields must have the same mapping (definition) in both types

-----------------------------------
Alternatives to mapping types:
1.Index per document type-
The first alternative is to have an index per document type.
Instead of storing tweets and users in a single twitter index, you could store tweets in the tweets index and users in
 the user index.
 Indices are completely independent of each other and so there will be no conflict of field types between indices.

This approach has two benefits:
- Data is more likely to be dense and so benefit from compression techniques used in Lucene.
- The term statistics used for scoring in full text search are more likely to be accurate because all
 documents in the same index represent a single entity.

2.
Custom type fieldedit
Of course, there is a limit to how many primary shards can exist in a cluster so you may not want to waste an entire
shard for a collection of only a few thousand documents.
 In this case, you can implement your own custom type field which will work in a similar way to the old _type.

 Let’s take the user/tweet example above.
  Originally (old method) the workflow would have looked something like this:

 PUT twitter
 {
   "mappings": {
     "user": {
       "properties": {
         "name": { "type": "text" },
         "user_name": { "type": "keyword" },
         "email": { "type": "keyword" }
       }
     },
     "tweet": {
       "properties": {
         "content": { "type": "text" },
         "user_name": { "type": "keyword" },
         "tweeted_at": { "type": "date" }
       }
     }
   }
 }
---
You can achieve the same thing by adding a custom type field as follows:
PUT twitter
{
  "mappings": {
    "_doc": {
      "properties": {
        "type": { "type": "keyword" }, (1)        .
        "name": { "type": "text" },
        "user_name": { "type": "keyword" },
        "email": { "type": "keyword" },
        "content": { "type": "text" },
        "tweeted_at": { "type": "date" }
      }
    }
  }
}

PUT twitter/_doc/user-kimchy
{
  "type": "user",
  "name": "Shay Banon",
  "user_name": "kimchy",
  "email": "shay@kimchy.com"
}

PUT twitter/_doc/tweet-1
{
  "type": "tweet",
  "user_name": "kimchy",
  "tweeted_at": "2017-10-24T09:00:00Z",
  "content": "Types are going away"
}

GET twitter/_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "user_name": "kimchy"
        }
      },
      "filter": {
        "match": {
          "type": "tweet"(1)
        }
      }
    }
  }
}

(1)-The explicit type field takes the place of the implicit _type field


------------------------------------------
Parent/Child without mapping typesedit
Previously, a parent-child relationship was represented by making one mapping type the parent, and one or more other
 mapping types the children.
Without types, we can no longer use this syntax.
The parent-child feature will continue to function as before,
 except that the way of expressing the relationship between documents has been changed to use the new join field.